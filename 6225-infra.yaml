Description: This template deploys a VPC, with a pair of public spread
  across three Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: EnvForVPC

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.12.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: csye6225

  CloudImageID:
    Description: imageID
    Type: String
    Default: ami-0cc33b2a7dd789a10

  AccessKeyId:
    Description: Please enter AccessKeyId
    Type: String
    Default: AKIA354HZBXASQD4NC4V

  AccessKey:
    Description: Please enter name for the S3 bucket
    Type: String
    Default: 4HmP8/LARlfTjYhcIlP+4Umz/l3a1mGC47YSz5kD

  DatabaseType:
    Type: String
    Default: 'MySQL'

  BucketName:
    Description: Please enter name for the S3 bucket
    Type: String
    Default: prod.spicyrice.me

  EngineVersion:
    Type: String
    Default: '8.0.28'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'no-ingress-sg'
      GroupDescription: 'Security group with no ingress rule'
      VpcId: !Ref VPC

  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !Ref CloudImageID
  #     InstanceType: t2.micro
  #     KeyName: !Ref KeyName
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroupIds:
  #       - !Ref WebAppSecurityGroup
  #     DisableApiTermination: true
  #     IamInstanceProfile: !Ref WebInstanceProfile
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         echo "spring.datasource.url = jdbc:mysql://${DBinstance.Endpoint.Address}:3306/csye6225" >> /tmp/src/main/resources/application.properties
  #         echo "spring.datasource.username = csye6225" >> /tmp/src/main/resources/application.properties
  #         echo "spring.datasource.password =  Zoe123456789!" >> /tmp/src/main/resources/application.properties

  #         echo "server.port=8080" >> /tmp/src/main/resources/application.properties
  #         echo "spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect" >> /tmp/src/main/resources/application.properties
  #         echo "spring.jpa.hibernate.ddl-auto = update" >> /tmp/src/main/resources/application.properties

  #         echo "aws.access_key_id = ${AccessKeyId}" >> /tmp/src/main/resources/application.properties
  #         echo "aws.secret_access_key= ${AccessKey}" >> /tmp/src/main/resources/application.properties
  #         echo "aws.s3.region= us-west-2" >> /tmp/src/main/resources/application.properties
  #         echo "aws.s3.bucket= ${S3Bucket}" >> /tmp/src/main/resources/application.properties

  #         crontab -l | { cat; echo "@reboot (cd /tmp && mvn -N io.takari:maven:wrapper && ./mvnw spring-boot:run)"; } | crontab -
  #         cd /tmp
  #         ls -a
  #         mvn -N io.takari:maven:wrapper
  #         ./mvnw spring-boot:run
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: gp2
  #           VolumeSize: '20'
  #           DeleteOnTermination: 'false'
  #           Encrypted: 'true'

  RDSDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group'
      DBSubnetGroupName: 'PrivateSubnets'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  DBinstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: 'csye6225'
      DBName: 'csye6225'
      VPCSecurityGroups:
        - Ref: 'DbSecurityByEC2SecurityGroup'
      AllocatedStorage: '20'
      DBInstanceClass: 'db.t3.small'
      Engine: !Ref DatabaseType
      EngineVersion: !Ref EngineVersion
      MasterUsername: 'csye6225'
      MasterUserPassword: 'Zoe123456789!'
      PubliclyAccessible: 'false'
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      MultiAZ: 'false'
      DBParameterGroupName: !Ref DBParameterGroup

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: MySQL8.0
      Description: Cloud formation DatabaseType

  DbSecurityByEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'database'
      GroupDescription: 'Ingress for Amazon EC2 security group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt WebAppSecurityGroup.GroupId

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Enable SSH access via port 22 and http access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - '${RandomGUID}.${BucketName}'
        - {
            RandomGUID:
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]],
              ],
          }
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LCRule
            Prefix: files
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365

  FullS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GHUploadToS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3-object-lambda:*'
              - 's3:*'
            Resource: '*'
      Roles:
        - !Ref IAMRole

  webapp:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: 'mywebapp'
      ComputePlatform: Server

  ClockAgentPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GHUploadToS3Policy-clockAgentPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
            Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'
      Roles:
        - !Ref IAMRole

  CodeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codedeploy.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allow-autoscaling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:*
                Resource: '*'
  WebappDeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      DeploymentGroupName: 'mywebapp'
      ApplicationName: !Ref webapp
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoScalingGroups:
        - Ref: asgWebApp

  WebAppS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:DeleteObjectTagging'
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:ListBucketMultipartUploads'
              - 's3:DeleteObjectVersion'
              - 's3:ListBucketVersions'
              - 's3:PutObjectVersionTagging'
              - 's3:ListBucket'
              - 's3:PutObjectTagging'
              - 's3:DeleteObject'
              - 's3:GetObjectVersion'
              - 's3:ListMultipartUploadParts'
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}*
      Roles:
        - !Ref IAMRole

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: 'EC2-CSYE6225'

  WebInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'web-application-ec2-instance-profile'
      Path: '/'
      Roles:
        - !Ref IAMRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP/HTTPS and SSH inbound and outbound traffic'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  asgLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: 'gp3'
            DeleteOnTermination: true
      ImageId: !Ref CloudImageID
      IamInstanceProfile: !Ref WebInstanceProfile
      InstanceType: t2.micro
      KeyName: csye6225
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      LaunchConfigurationName: 'asg_launch_config'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          cd /tmp 
          touch csye6225.log
          sudo chmod -R 777 /tmp
          echo "logging.file.name =/tmp/csye6225.log" >> /tmp/jdbc.properties

          echo "spring.datasource.url = jdbc:mysql://${DBinstance.Endpoint.Address}:3306/csye6225" >> /tmp/jdbc.properties
          echo "spring.datasource.username = csye6225" >> /tmp/jdbc.properties
          echo "spring.datasource.password =  Zoe123456789!" >> /tmp/jdbc.properties
          echo "spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect" >> /tmp/jdbc.properties
          echo "spring.jpa.hibernate.ddl-auto = update" >> /tmp/jdbc.properties
          echo "aws.access_key_id = ${AccessKeyId}" >> /tmp/jdbc.properties
          echo "aws.secret_access_key= ${AccessKey}" >> /tmp/jdbc.properties
          echo "aws.s3.region= us-west-2" >> /tmp/jdbc.properties
          echo "aws.s3.bucket= ${S3Bucket}" >> /tmp/jdbc.properties
          echo "publish.metrics = true" >> /tmp/jdbc.properties
          echo "metrics.server.hostname = localhost" >> /tmp/jdbc.properties
          echo "metrics.server.port = 8125" >> /tmp/jdbc.properties

          echo "aws.dynamodb.tableName = TOKENS" >> /tmp/jdbc.properties
          echo "sns.topic.arn= ${WebAppSNSTopic}" >> /tmp/jdbc.properties


          crontab -l | { cat; echo "@reboot (cd /tmp && java -jar webservice-0.0.1-SNAPSHOT.jar --spring.config.location=file:///tmp/jdbc.properties)"; } | crontab -
          cd /tmp
          java -jar webservice-0.0.1-SNAPSHOT.jar --spring.config.location=file:///tmp/jdbc.properties

  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - !Select [0, !GetAZs '']
        - !Select [1, !GetAZs '']
        - !Select [2, !GetAZs '']
      Cooldown: '60'
      LaunchConfigurationName: !Ref asgLaunchConfiguration
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      MaxSize: '5'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: 'true'
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: 'true'
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  myScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      ScalingAdjustment: '1'

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '5'
      AlarmDescription:
        Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: '60'
      AlarmActions:
        - !Ref myScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  myScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      ScalingAdjustment: '-1'

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '3'
      AlarmDescription:
        Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: '60'
      AlarmActions:
        - !Ref myScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/health'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP

  myDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: prod.spicyrice.me.
      RecordSets:
        - Name: prod.spicyrice.me.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'loadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'loadBalancer.DNSName'

  tokenDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'TOKENS'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: 'HASH'
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true

  sentDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'SENTS'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: 'HASH'

  WebAppSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'csye6225-webapp-topic'
      FifoTopic: 'false'
      Subscription:
        - Endpoint: arn:aws:lambda:us-east-1:574594835790:function:vemailFunction
          Protocol: lambda

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyEmailFunction.Arn
      Principal: sns.amazonaws.com

  VerifyEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: VerifyEmailEvent::handleRequest
      Role: !GetAtt MyLambdaRole.Arn
      Code:
        S3Bucket: csye6225-serverless-bucket-a9
        S3Key: serverless-1.0-SNAPSHOT.jar
      Runtime: java11
      Timeout: 120
      FunctionName: vemailFunction
      MemorySize: 512

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: 'Lambda-CSYE6225'

  SESFullAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SESFullAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ses:*'
            Resource: '*'
      Roles:
        - !Ref MyLambdaRole

  LambdaExecuteAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: LambdaExecute
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:*'
            Resource: 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref MyLambdaRole

  DynamoFullAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DynamoFullAccessPolicy
      Roles:
        - !Ref MyLambdaRole
      PolicyDocument:
        {
          'Version': '2012-10-17',
          'Statement':
            [
              {
                'Action':
                  [
                    'dynamodb:*',
                    'dax:*',
                    'application-autoscaling:DeleteScalingPolicy',
                    'application-autoscaling:DeregisterScalableTarget',
                    'application-autoscaling:DescribeScalableTargets',
                    'application-autoscaling:DescribeScalingActivities',
                    'application-autoscaling:DescribeScalingPolicies',
                    'application-autoscaling:PutScalingPolicy',
                    'application-autoscaling:RegisterScalableTarget',
                    'cloudwatch:DeleteAlarms',
                    'cloudwatch:DescribeAlarmHistory',
                    'cloudwatch:DescribeAlarms',
                    'cloudwatch:DescribeAlarmsForMetric',
                    'cloudwatch:GetMetricStatistics',
                    'cloudwatch:ListMetrics',
                    'cloudwatch:PutMetricAlarm',
                    'cloudwatch:GetMetricData',
                    'datapipeline:ActivatePipeline',
                    'datapipeline:CreatePipeline',
                    'datapipeline:DeletePipeline',
                    'datapipeline:DescribeObjects',
                    'datapipeline:DescribePipelines',
                    'datapipeline:GetPipelineDefinition',
                    'datapipeline:ListPipelines',
                    'datapipeline:PutPipelineDefinition',
                    'datapipeline:QueryObjects',
                    'ec2:DescribeVpcs',
                    'ec2:DescribeSubnets',
                    'ec2:DescribeSecurityGroups',
                    'iam:GetRole',
                    'iam:ListRoles',
                    'kms:DescribeKey',
                    'kms:ListAliases',
                    'sns:CreateTopic',
                    'sns:DeleteTopic',
                    'sns:ListSubscriptions',
                    'sns:ListSubscriptionsByTopic',
                    'sns:ListTopics',
                    'sns:Subscribe',
                    'sns:Unsubscribe',
                    'sns:SetTopicAttributes',
                    'lambda:CreateFunction',
                    'lambda:ListFunctions',
                    'lambda:ListEventSourceMappings',
                    'lambda:CreateEventSourceMapping',
                    'lambda:DeleteEventSourceMapping',
                    'lambda:GetFunctionConfiguration',
                    'lambda:DeleteFunction',
                    'resource-groups:ListGroups',
                    'resource-groups:ListGroupResources',
                    'resource-groups:GetGroup',
                    'resource-groups:GetGroupQuery',
                    'resource-groups:DeleteGroup',
                    'resource-groups:CreateGroup',
                    'tag:GetResources',
                    'kinesis:ListStreams',
                    'kinesis:DescribeStream',
                    'kinesis:DescribeStreamSummary',
                  ],
                'Effect': 'Allow',
                'Resource': '*',
              },
              {
                'Action': 'cloudwatch:GetInsightRuleReport',
                'Effect': 'Allow',
                'Resource': 'arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*',
              },
              {
                'Action': ['iam:PassRole'],
                'Effect': 'Allow',
                'Resource': '*',
                'Condition':
                  {
                    'StringLike':
                      {
                        'iam:PassedToService':
                          [
                            'application-autoscaling.amazonaws.com',
                            'application-autoscaling.amazonaws.com.cn',
                            'dax.amazonaws.com',
                          ],
                      },
                  },
              },
              {
                'Effect': 'Allow',
                'Action': ['iam:CreateServiceLinkedRole'],
                'Resource': '*',
                'Condition':
                  {
                    'StringEquals':
                      {
                        'iam:AWSServiceName':
                          [
                            'replication.dynamodb.amazonaws.com',
                            'dax.amazonaws.com',
                            'dynamodb.application-autoscaling.amazonaws.com',
                            'contributorinsights.dynamodb.amazonaws.com',
                            'kinesisreplication.dynamodb.amazonaws.com',
                          ],
                      },
                  },
              },
            ],
        }
